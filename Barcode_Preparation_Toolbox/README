Barcode Preparation Toolbox Readme

DISCLAIMER:
Meric Lieberman, 2011
This work is the property of UC Davis Genome Center - Comai Lab

Use at your own risk. 
We cannot provide support.
All information obtained/inferred with these scripts is without any 
implied warranty of fitness for any purpose or use whatsoever. 


SUMMARY:
The scripts included are for use in preparation of raw illumina reads for further analysis. 
Traditionally, we do all prep work with a single script called "Allprep", that does barcode 
check and match, 'N' filtering, primary and secondary adapter contamination, quality 
conversion, quality trimming, length trimming, and library separation.

However, if parts of the preparation process needs to be performed independently, we also 
provide smaller scripts to do the process modularly.

Please note that:
- all of the scripts have a description of what they do, input parameters,
   and running directions at the beginning of each program. 
- all scripts use command line parameters as input and all scripts can be run with 
   ./"programname" provided Python 2.4+ is installed on your system. 
- these scripts can be used with paired end or single ended data, and some can be 
   run on data without barcodes.


CONTENTS:

This .tgz includes:

allPrep-7s.py - Single script to do all processing as detailed above.

barcodeSplitter.py -  This program takes a barcode file and splits the lane sequence.txt 
	files into specified library.txt (lib#.txt) files. Note that Illumina 1.5-1.6 .txt 
	format does not have Sanger qualities and needs to be converted for use in tools that 
	require Sanger .fq (fastq) format (see below).

illuminaToSanger.py - This program converts an illumina 1.5+ .txt file to a Sanger 
	.fq/.fastq format (phred+33 scaling)

trimFastqQuality.py - This program takes a Sanger .fq/.fastq file and trims by a average quality 
	cutoff, throwing away reads shorter then a specified length after trimming.

adapterEffectRemover.py - This program takes a .fq/.fastq file an looks for adapter 
	contamination (based on the strandard Illumina adaptor sequences). If found, 
	adapter sequences are removed. If the resulting read is shorter 
	than specified minLength the read is rejected.

read_N_remover.py - This program takes a .fq/.fastq file and goes through the reads, 
	rejecting any with 'N' instances in the sequence (one N is sufficient for 
	rejecting of the entire read. This is based on the observation that N within 
	reads are usually diagnostic of poor sequence quality).

countAllBarcodes-RAW.py - This program takes a raw reads file and goes through and counts 
	instance of every barcode seen in the file then outputs the counts to 
	"counted-"inputFileName.

interleaveSwitcher.py - This script will interleave two files or uninterleave a file. 
	This is only applicable to paired-end reads. "Interleaved" means that the two 
	ends of a read are placed together in the final file. View parameters in
	script for running directions. The i flag is to interleave, and u flag for uninterleave.

	
--------------------------------------------------------------------------
--------------------------------------------------------------------------	
	
SCRIPT DETAILS:
The following information can be found at the top of every script, 
after disclaimer and library import.

--------------------------------------------------------------------------

allPrep-7s.py

Note: Naming convention must be used as specified, all sequence files must be in 
illumina 1.5+ format to be correctly converted to sanger fastq

Usage: programName.py barcode_file.txt [s] [t] [u]

Input Parameters:
[t] output thrown out to a file
[s] single ended data
[u] do not use T overhang in barcode
Default is single ended, no rejected read output, use 'T' overhang

This program that takes a barcode file and splits the lane sequence.txt files into specified 
library.txt (lib#.txt) files, does barcode check and match, 'N' filtering, primary and 
secondary adapter contamination, quality conversion, quality trimming (mean quality of 20 over 5 base window), 
length trimming (default 35), and library separation.

Running in paired ended mode will throw away both ends if one end is rejected, to keep both
append the two raw read files together and run single ended.

This requires a barcode file with name "prefix"-barcodes in the barcodes file is a line 
for each lane, tab separated in the form: 
lanenum<Tab>barcode1-libNum1<Tab>barcode2-libNum2<tab>...<Tab>barcodeLast-LibNumLast<EOL>


So here are some sample lane strings (in this case \t means tab and \n means end of line):

In file test-barcodes.txt:
line1: 5\tAACCC-1\tCCATC-6\tGATGT-11\tGTGAG-16\n'
line2: 7\tTTCCC-2\tGCACC-14\tAATGT-13\tATGAC-27\n'
this barcode file would work with single ended files test-5.txt and test-7.txt,
or paired end test-5-1.txt, test-5-2.txt, test-7-1.txt, and test-7-2.txt

The files for each lane MUST BE in the form:
Single-ended: prefix-laneNumber.txt
paired-ended: prefix-laneNumber-1.txt and prefix-laneNumber-2.txt (1 = forward, 2 = reverse)

Important:
- This program will then split the reads by barcode, if using the same barcode in two lanes,
	give them different library numbers, or the first lane lib#.fq will be overwritten
- The last line of the barcode file should end with a newline or the last character of the last 
	library name will be chopped off.
- Make sure not to run two lanes carrying libraries with the same name otherwise, the data 
	from the first lane will be overwritten when the second lane is processed.
- "barcode" are the sequences that are present in the adaptors. This script will 
	look for the reverse complement of that.

--------------------------------------------------------------------------

barcodeSplitter.py
   
Usage: programName.py barcode_file.txt [p] [t] [u]

Input Parameters:
[t] output thrown out to a file
[p] pair ended data
[u] do not use T's in barcode
Default is single ended, no rejected read output, use 'T' overhang

This program that takes a barcode file and splits the lane sequence.txt files into specified 
library.txt (lib#.txt) files. Note that Illumina 1.5-1.6 .txt format IS NOT sanger qualities 
and needs converted, that is why the output should be .txt and not .fa/.fastq

Also, running in paired ended mode will throw away both ends if one end is rejected, to keep both
append the two raw files together and run single ended.

This requires a barcode file with name "prefix"-barcodes
In the barcodes file is a line for each lane, tab separated 
in the form: lanenum<Tab>barcode1-libNum1<Tab>barcode2-libNum2<tab>...<Tab>barcodeLast-LibNumLast<EOL>

Sample lane strings (in this case \t means tab and \n means end of line):

File: test-barcodes.txt
line1: 5\tAACCC-1\tCCATC-6\tGATGT-11\tGTGAG-16\n'
line2: 7\tTTCCC-2\tGCACC-14\tAATGT-13\tATGAC-27\n'
this barcode file would work with single ended files test-5.txt and test-7.txt,
or paired end test-5-1.txt, test-5-2.txt, test-7-1.txt, and test-7-2.txt

The files for each lane MUST BE in the form:
Single-ended: prefix-laneNumber.txt
Paired-ended: prefix-laneNumber-1.txt and prefix-laneNumber-2.txt (1 = forward, 2 = reverse)

This program will then split the reads by barcode

Important: 
- if using the same barcode in two lanes, give them different library numbers, 
	or the first lane lib#.txt will be overwritten.
- The last line of the barcode file should end with a newline or the last 
	charater of the last library name will be chopped off.
- Make sure not to run two lanes carrying libraries with the same name otherwise, 
	the data from the first lane will be overwritten when the second lane is processed. 
- Barcode are the sequences that are present in the adaptors. This script will 
	look for the reverse complement of that.
   
--------------------------------------------------------------------------

illuminaToSanger.py

Usage: programName.py fileName outputFileName.fq

Input Parameters:
filename: the filename/location of the illumina file to convert
outputFileName: the destination filename/location of the result


This program convers an illumina 1.5+ .txt file to
a sanger .fq/.fastq format (phred+33 scaling)
 
--------------------------------------------------------------------------

trimFastqQuality.py

Usage: programName.py low_quality_cutoff#(phred-score) minLength fileName.fq outputFileName.fq [t] [p]

Input Parameters:
low_quality_cutoff# = minimum phred score, for sliding window average quality
*It checks all 5 base windows of the read for an average quality less than the cutoff,
cutting at the begining of the window if it finds a bad one(scans from start of read)

minLength = after trimming, minimum read length
filename.fq = original file input, sanger .fastq file
outputFileName.fq = output file name/location

Script Options, add after normal parameters
t = output rejected reads to "removed-"+original_file_name
p = if the data is paired

If you run it paired, it will discard the read mate. So if the /1 forward read is rejected
then the /2 reverse corresponding read will be rejected also.

This program takes a SANGER .FQ/.FASTQ file and
trims by a quality cutoff.
DO NOT use with unconverted raw Illumina reads.

If trimmed to length less than min_read_length_number,
rejects read and trimmed read does not output even if t flag is used.

--------------------------------------------------------------------------
 
adapterEffectRemover.py

Usage: programName.py minLength fileName outputFileName.fq [p] [b]

Input Parameters:
minLength = after trimming, minimum read length
filename.fq = original file input, sanger .fastq file
outputFileName.fq = output file name/location

Script Options, add after normal parameters
b = data does not use barcodes
p = run with paired end data, reoving mate or pair if one side fails


This should be used with interleaved paired-ended data.

This program takes a .fq/.fastq file an looks for adapter contamination
adapter is then removed, if read is shorter than specified minLength
the read is rejected.

--------------------------------------------------------------------------

read_N_remover.py

Usage: programName.py fileName outputFileName.fq [p]

Input Parameters:
filename.fq = original file input, sanger .fastq file
outputFileName.fq = output file name/location

Script Options, add after normal parameters
p = run with paired end data, removing mate or pair if one side fails

This program takes a .fq/.fastq file and goes through the reads,
rejecting any with 'N' instances.

--------------------------------------------------------------------------

countAllBarcodes-RAW.py

use: countAllBarcodes.py readFile.txt

This program counts all barcodes in a raw illumina "@SOLEXA" and "@HWI-" sequenced
file and outputs the counts of the barcodes in descending order.

Input Parameters:
readFile.txt = original read file input, sinlge ended running only.

For paired end data, run on each side individually or append files together. 

--------------------------------------------------------------------------

interleaveSwitcher.py

Usage: programName.py i forwardFile.fq reverseFile.fq outFileName.fq
       ______OR_______
Usage: programName.py u interleavedFile

This program has two operating modes, defined by the first command line parameter.

Interleave mode, first parameter an 'i' or an 'I'.
   This will take two read files of equal length and interleave them.
Input Parameters:
forwardFile.fq = original file input, sanger or illumina file forward side
reverseFile = original file input, sanger or illumina reverse side
outFileName.fq = interleaved output file name/location

Uninterleave mode, first parameter an 'u' or an 'U'.
   This will take one interleaved paired read file and split them into two paired read files.
   The -1.fq and -2.fq result files will be forward and backward respectively.
Input Parameters:
interleavedFile.fq = original file input, sanger or illumina interleaved paired reads

Be sure to put the i/u as the first parameter!

--------------------------------------------------------------------------



